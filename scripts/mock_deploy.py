#!/usr/bin/env python3
"""
PRSM FTNS Mock Contract Deployment

Creates a mock deployment for development and testing purposes.
This allows testing the Web3 integration without requiring actual
smart contract deployment.
"""

import json
import os
import secrets
from datetime import datetime
from pathlib import Path

def generate_mock_address():
    """Generate a realistic-looking contract address"""
    return "0x" + secrets.token_hex(20)

def create_mock_deployment():
    """Create a mock deployment record"""
    
    # Generate mock data
    deployment_data = {
        "network": "polygon_mumbai",
        "chain_id": 80001,
        "deployer": "0x742D35Cc6603C0532C4E9Fdb7b5A4F6c8c4b6D3f",  # Mock deployer
        "treasury": "0x742D35Cc6603C0532C4E9Fdb7b5A4F6c8c4b6D3f",
        "timestamp": datetime.utcnow().isoformat(),
        "contracts": {
            "ftns_token": generate_mock_address()
        },
        "token_config": {
            "name": "PRSM Fungible Tokens for Node Support",
            "symbol": "FTNS", 
            "decimals": 18,
            "initial_supply": 100_000_000,
            "max_supply": 1_000_000_000
        },
        "deployment_type": "mock",
        "gas_used": 2_500_000,
        "transaction_hash": "0x" + secrets.token_hex(32),
        "verified": False,
        "notes": "Mock deployment for development and testing purposes"
    }
    
    return deployment_data

def save_deployment_record(deployment_data):
    """Save deployment record to file"""
    
    # Create deployments directory
    deployments_dir = Path(__file__).parent.parent / "deployments"
    deployments_dir.mkdir(exist_ok=True)
    
    # Save deployment record
    timestamp = int(datetime.utcnow().timestamp())
    filename = f"{deployment_data['network']}-mock-{timestamp}.json"
    filepath = deployments_dir / filename
    
    with open(filepath, 'w') as f:
        json.dump(deployment_data, f, indent=2)
    
    return filepath

def create_env_template(deployment_data):
    """Create environment template with deployment info"""
    
    env_content = f"""# PRSM FTNS Testnet Configuration
# Generated by mock deployment script

# Web3 Configuration  
FTNS_TOKEN_ADDRESS={deployment_data['contracts']['ftns_token']}
WEB3_NETWORK=polygon_mumbai
WEB3_MONITORING_ENABLED=true
FAUCET_INTEGRATION_ENABLED=true

# Polygon Mumbai RPC
POLYGON_MUMBAI_RPC_URL=https://rpc-mumbai.maticvigil.com

# Development wallet (generate a test wallet for development)
WALLET_PRIVATE_KEY=

# Optional: PolygonScan API for verification
POLYGONSCAN_API_KEY=

# Mock deployment info
DEPLOYMENT_TYPE=mock
DEPLOYMENT_TIMESTAMP={deployment_data['timestamp']}
"""
    
    env_file = Path(__file__).parent.parent / ".env.testnet"
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    return env_file

def main():
    """Main mock deployment function"""
    
    print("üöÄ PRSM FTNS Mock Contract Deployment")
    print("="*60)
    print("Creating mock deployment for development and testing...")
    
    # Create mock deployment
    deployment_data = create_mock_deployment()
    
    # Save deployment record
    deployment_file = save_deployment_record(deployment_data)
    
    # Create environment template
    env_file = create_env_template(deployment_data)
    
    # Display results
    print("\n‚úÖ Mock deployment created successfully!")
    print("\nüìã Deployment Summary:")
    print(f"Network: {deployment_data['network']}")
    print(f"Chain ID: {deployment_data['chain_id']}")
    print(f"FTNS Token: {deployment_data['contracts']['ftns_token']}")
    print(f"Deployment Type: {deployment_data['deployment_type']}")
    print(f"Timestamp: {deployment_data['timestamp']}")
    
    print(f"\nüìÑ Files created:")
    print(f"- Deployment record: {deployment_file}")
    print(f"- Environment template: {env_file}")
    
    print(f"\nüîß Integration Steps:")
    print("1. Copy configuration to your main .env file:")
    print(f"   cat {env_file} >> .env")
    
    print("\n2. Generate a test wallet:")
    print("   # You can use any Ethereum wallet generator")
    print("   # Or create one programmatically")
    
    print("\n3. Get testnet MATIC:")
    print("   # Visit: https://faucet.polygon.technology/")
    print("   # Request MATIC for your test wallet")
    
    print("\n4. Test Web3 integration:")
    print("   python -m uvicorn prsm.api.main:app --reload")
    print("   curl http://localhost:8000/api/v1/web3/wallet/info")
    
    print("\n5. Initialize contracts:")
    print("   curl -X POST http://localhost:8000/api/v1/web3/contracts/initialize \\")
    print("     -H 'Content-Type: application/json' \\")
    print(f"     -d '{{\"ftns_token\": \"{deployment_data['contracts']['ftns_token']}\"}}'")
    
    print("\n‚ö†Ô∏è  Important Notes:")
    print("- This is a MOCK deployment for development only")
    print("- No actual smart contracts were deployed")
    print("- Use this to test the Web3 integration layer")
    print("- For production, deploy real contracts to testnet")
    
    print("\nüîÑ Next Steps for Real Deployment:")
    print("1. Install hardhat and dependencies in contracts/")
    print("2. Configure deployment wallet with testnet MATIC")
    print("3. Run: npm run deploy:testnet (in contracts directory)")
    print("4. Update PRSM configuration with real contract address")
    
    return deployment_data

if __name__ == '__main__':
    try:
        deployment = main()
        print(f"\nüéâ Mock deployment complete! Contract address: {deployment['contracts']['ftns_token']}")
    except Exception as e:
        print(f"\n‚ùå Mock deployment failed: {e}")
        exit(1)