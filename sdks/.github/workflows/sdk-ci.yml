name: PRSM SDKs CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'sdks/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'sdks/**'
  release:
    types: [ published ]

jobs:
  python-sdk:
    name: Python SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      working-directory: ./sdks/python
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      working-directory: ./sdks/python
      run: |
        flake8 prsm_sdk --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 prsm_sdk --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      working-directory: ./sdks/python
      run: black --check prsm_sdk
    
    - name: Import sort check with isort
      working-directory: ./sdks/python
      run: isort --check-only prsm_sdk
    
    - name: Type check with mypy
      working-directory: ./sdks/python
      run: mypy prsm_sdk
    
    - name: Test with pytest
      working-directory: ./sdks/python
      run: |
        pytest --cov=prsm_sdk --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sdks/python/coverage.xml
        flags: python-sdk
        name: codecov-python-sdk

  javascript-sdk:
    name: JavaScript SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './sdks/javascript/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./sdks/javascript
      run: npm ci
    
    - name: Lint
      working-directory: ./sdks/javascript
      run: npm run lint
    
    - name: Type check
      working-directory: ./sdks/javascript
      run: npm run typecheck
    
    - name: Build
      working-directory: ./sdks/javascript
      run: npm run build
    
    - name: Test
      working-directory: ./sdks/javascript
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sdks/javascript/coverage/lcov.info
        flags: javascript-sdk
        name: codecov-javascript-sdk

  go-sdk:
    name: Go SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20, 1.21]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Download dependencies
      working-directory: ./sdks/go
      run: go mod download
    
    - name: Verify dependencies
      working-directory: ./sdks/go
      run: go mod verify
    
    - name: Build
      working-directory: ./sdks/go
      run: go build -v ./...
    
    - name: Run tests
      working-directory: ./sdks/go
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sdks/go/coverage.out
        flags: go-sdk
        name: codecov-go-sdk

  publish-python:
    name: Publish Python SDK
    needs: python-sdk
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      working-directory: ./sdks/python
      run: python -m build
    
    - name: Publish to PyPI
      working-directory: ./sdks/python
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  publish-javascript:
    name: Publish JavaScript SDK
    needs: javascript-sdk
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      working-directory: ./sdks/javascript
      run: npm ci
    
    - name: Build
      working-directory: ./sdks/javascript
      run: npm run build
    
    - name: Publish to npm
      working-directory: ./sdks/javascript
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish --access public