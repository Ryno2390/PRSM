name: 🔒 Security Validation Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  PYTHON_VERSION: '3.9'
  PYTHONPATH: ${{ github.workspace }}

jobs:
  # =============================================================================
  # Static Security Analysis
  # =============================================================================
  static-security:
    name: 🔍 Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep pip-audit

      - name: 🔒 Bandit Security Scan
        run: |
          echo "🔒 Running Bandit security scan..."
          bandit -r prsm/ -f json -o bandit-security-report.json -v
          bandit -r prsm/ -f txt -o bandit-security-report.txt -v

      - name: 🛡️ Safety Dependency Check
        run: |
          echo "🛡️ Checking for known security vulnerabilities in dependencies..."
          safety check --json --output safety-security-report.json
          safety check --output safety-security-report.txt

      - name: 🔍 Semgrep Security Analysis
        run: |
          echo "🔍 Running Semgrep security analysis..."
          semgrep --config=auto prsm/ --json --output semgrep-security-report.json || true
          semgrep --config=auto prsm/ --output semgrep-security-report.txt || true

      - name: 📋 pip-audit Security Check
        run: |
          echo "📋 Running pip-audit for dependency vulnerabilities..."
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx-json --output=pip-audit-cyclonedx.json || true

      - name: 📊 Security Summary
        run: |
          echo "📊 Generating security summary..."
          
          python3 << 'EOF'
import json
import os
from datetime import datetime

security_summary = {
    "timestamp": datetime.utcnow().isoformat(),
    "commit_sha": os.environ.get("GITHUB_SHA", "unknown"),
    "branch": os.environ.get("GITHUB_REF_NAME", "unknown"),
    "scan_results": {}
}

# Process Bandit results
try:
    with open('bandit-security-report.json', 'r') as f:
        bandit_data = json.load(f)
    
    security_summary["scan_results"]["bandit"] = {
        "total_issues": len(bandit_data.get("results", [])),
        "high_severity": len([r for r in bandit_data.get("results", []) if r.get("issue_severity") == "HIGH"]),
        "medium_severity": len([r for r in bandit_data.get("results", []) if r.get("issue_severity") == "MEDIUM"]),
        "low_severity": len([r for r in bandit_data.get("results", []) if r.get("issue_severity") == "LOW"]),
        "status": "completed"
    }
except Exception as e:
    security_summary["scan_results"]["bandit"] = {"status": "failed", "error": str(e)}

# Process Safety results
try:
    with open('safety-security-report.json', 'r') as f:
        safety_data = json.load(f)
    
    vulnerabilities = safety_data.get("vulnerabilities", []) if isinstance(safety_data, dict) else safety_data
    security_summary["scan_results"]["safety"] = {
        "vulnerabilities_found": len(vulnerabilities),
        "status": "completed"
    }
except Exception as e:
    security_summary["scan_results"]["safety"] = {"status": "failed", "error": str(e)}

# Process Semgrep results
try:
    with open('semgrep-security-report.json', 'r') as f:
        semgrep_data = json.load(f)
    
    findings = semgrep_data.get("results", [])
    security_summary["scan_results"]["semgrep"] = {
        "findings": len(findings),
        "error_findings": len([f for f in findings if f.get("extra", {}).get("severity") == "ERROR"]),
        "warning_findings": len([f for f in findings if f.get("extra", {}).get("severity") == "WARNING"]),
        "status": "completed"
    }
except Exception as e:
    security_summary["scan_results"]["semgrep"] = {"status": "failed", "error": str(e)}

# Calculate overall security score
total_issues = 0
critical_issues = 0

bandit_results = security_summary["scan_results"].get("bandit", {})
if bandit_results.get("status") == "completed":
    total_issues += bandit_results.get("total_issues", 0)
    critical_issues += bandit_results.get("high_severity", 0)

safety_results = security_summary["scan_results"].get("safety", {})
if safety_results.get("status") == "completed":
    critical_issues += safety_results.get("vulnerabilities_found", 0)

semgrep_results = security_summary["scan_results"].get("semgrep", {})
if semgrep_results.get("status") == "completed":
    total_issues += semgrep_results.get("findings", 0)
    critical_issues += semgrep_results.get("error_findings", 0)

# Security score calculation (100 - penalties)
security_score = 100
security_score -= min(critical_issues * 15, 60)  # Max 60 points for critical issues
security_score -= min((total_issues - critical_issues) * 5, 30)  # Max 30 points for other issues
security_score = max(0, security_score)

security_summary["overall_security_score"] = security_score
security_summary["total_issues"] = total_issues
security_summary["critical_issues"] = critical_issues

# Save summary
with open('security_summary.json', 'w') as f:
    json.dump(security_summary, f, indent=2)

# Print GitHub summary
print("## 🔒 Security Scan Results")
print("")
print(f"**Overall Security Score:** {security_score}/100")
print(f"**Total Issues Found:** {total_issues}")
print(f"**Critical Issues:** {critical_issues}")
print("")

# Bandit results
if bandit_results.get("status") == "completed":
    print(f"### 🔒 Bandit Results")
    print(f"- High Severity: {bandit_results.get('high_severity', 0)}")
    print(f"- Medium Severity: {bandit_results.get('medium_severity', 0)}")
    print(f"- Low Severity: {bandit_results.get('low_severity', 0)}")
    print("")

# Safety results
if safety_results.get("status") == "completed":
    print(f"### 🛡️ Safety Results")
    print(f"- Vulnerabilities: {safety_results.get('vulnerabilities_found', 0)}")
    print("")

# Overall assessment
if security_score >= 90:
    print("✅ **Security Status: EXCELLENT** - No significant security issues")
elif security_score >= 75:
    print("⚠️ **Security Status: GOOD** - Minor issues found")
elif security_score >= 60:
    print("⚠️ **Security Status: NEEDS ATTENTION** - Multiple issues found")
else:
    print("❌ **Security Status: CRITICAL** - Significant security issues found")

EOF

      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: |
            security_summary.json
            bandit-security-report.*
            safety-security-report.*
            semgrep-security-report.*
            pip-audit-report.*

  # =============================================================================
  # Authentication & Authorization Testing
  # =============================================================================
  auth-security:
    name: 🔐 Authentication & Authorization
    runs-on: ubuntu-latest
    needs: static-security
    steps:
      - name: 🛒 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🔐 Authentication Flow Tests
        run: |
          echo "🔐 Testing authentication flows..."
          
          # Test JWT handling
          python3 << 'EOF'
import sys
sys.path.append('.')

try:
    from prsm.auth.jwt_handler import JWTHandler
    from prsm.auth.auth_manager import AuthManager
    
    print("✅ Authentication modules import successfully")
    
    # Test basic JWT functionality
    jwt_handler = JWTHandler()
    print("✅ JWT handler instantiated successfully")
    
    # Test auth manager
    auth_manager = AuthManager()
    print("✅ Auth manager instantiated successfully")
    
    auth_test_results = {
        "jwt_handler": "success",
        "auth_manager": "success",
        "status": "passed"
    }
    
except Exception as e:
    print(f"❌ Authentication test failed: {e}")
    auth_test_results = {
        "status": "failed",
        "error": str(e)
    }

import json
with open('auth_test_results.json', 'w') as f:
    json.dump(auth_test_results, f, indent=2)
EOF

      - name: 🛡️ Security Middleware Tests
        run: |
          echo "🛡️ Testing security middleware..."
          
          python3 << 'EOF'
import sys
sys.path.append('.')

middleware_results = {"tests": []}

# Test rate limiter
try:
    from prsm.auth.rate_limiter import RateLimiter
    rate_limiter = RateLimiter()
    middleware_results["tests"].append({"component": "rate_limiter", "status": "success"})
    print("✅ Rate limiter test passed")
except Exception as e:
    middleware_results["tests"].append({"component": "rate_limiter", "status": "failed", "error": str(e)})
    print(f"❌ Rate limiter test failed: {e}")

# Test middleware
try:
    from prsm.auth.middleware import AuthMiddleware
    middleware_results["tests"].append({"component": "auth_middleware", "status": "success"})
    print("✅ Auth middleware test passed")
except Exception as e:
    middleware_results["tests"].append({"component": "auth_middleware", "status": "failed", "error": str(e)})
    print(f"❌ Auth middleware test failed: {e}")

# Calculate overall status
failed_tests = [t for t in middleware_results["tests"] if t["status"] == "failed"]
middleware_results["overall_status"] = "failed" if failed_tests else "passed"
middleware_results["failed_count"] = len(failed_tests)
middleware_results["passed_count"] = len(middleware_results["tests"]) - len(failed_tests)

import json
with open('middleware_test_results.json', 'w') as f:
    json.dump(middleware_results, f, indent=2)
EOF

      - name: 📊 Security Test Summary
        run: |
          echo "📊 Generating security test summary..."
          
          python3 << 'EOF'
import json

# Load test results
try:
    with open('auth_test_results.json', 'r') as f:
        auth_results = json.load(f)
except:
    auth_results = {"status": "failed", "error": "No results file"}

try:
    with open('middleware_test_results.json', 'r') as f:
        middleware_results = json.load(f)
except:
    middleware_results = {"overall_status": "failed", "error": "No results file"}

print("## 🔐 Authentication & Authorization Test Results")
print("")

# Auth results
if auth_results.get("status") == "passed":
    print("✅ **Authentication Flow Tests: PASSED**")
else:
    print(f"❌ **Authentication Flow Tests: FAILED** - {auth_results.get('error', 'Unknown error')}")

# Middleware results
if middleware_results.get("overall_status") == "passed":
    print("✅ **Security Middleware Tests: PASSED**")
    print(f"   - Tests Passed: {middleware_results.get('passed_count', 0)}")
else:
    print(f"❌ **Security Middleware Tests: FAILED**")
    print(f"   - Tests Failed: {middleware_results.get('failed_count', 0)}")
    print(f"   - Tests Passed: {middleware_results.get('passed_count', 0)}")

# Overall security assessment
both_passed = (auth_results.get("status") == "passed" and 
               middleware_results.get("overall_status") == "passed")

if both_passed:
    print("")
    print("🎉 **AUTHENTICATION & AUTHORIZATION: SECURE**")
else:
    print("")
    print("⚠️ **AUTHENTICATION & AUTHORIZATION: ISSUES DETECTED**")
EOF

  # =============================================================================
  # Safety Framework Security Testing
  # =============================================================================
  safety-security:
    name: 🛡️ Safety Framework Security
    runs-on: ubuntu-latest
    needs: auth-security
    steps:
      - name: 🛒 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🛡️ SEAL Security Framework Test
        run: |
          echo "🛡️ Testing SEAL security framework..."
          
          python3 << 'EOF'
import sys
sys.path.append('.')

seal_results = {"components": [], "overall_status": "unknown"}

# Test SEAL RLT Enhanced Teacher
try:
    from prsm.safety.seal.seal_rlt_enhanced_teacher import SEALRLTEnhancedTeacher
    teacher = SEALRLTEnhancedTeacher()
    seal_results["components"].append({"component": "seal_rlt_teacher", "status": "success"})
    print("✅ SEAL RLT Enhanced Teacher security test passed")
except Exception as e:
    seal_results["components"].append({"component": "seal_rlt_teacher", "status": "failed", "error": str(e)})
    print(f"❌ SEAL RLT Enhanced Teacher test failed: {e}")

# Test general safety monitor
try:
    from prsm.safety.monitor import SafetyMonitor
    seal_results["components"].append({"component": "safety_monitor", "status": "success"})
    print("✅ Safety monitor security test passed")
except Exception as e:
    seal_results["components"].append({"component": "safety_monitor", "status": "failed", "error": str(e)})
    print(f"❌ Safety monitor test failed: {e}")

# Test circuit breaker
try:
    from prsm.safety.circuit_breaker import CircuitBreaker
    seal_results["components"].append({"component": "circuit_breaker", "status": "success"})
    print("✅ Circuit breaker security test passed")
except Exception as e:
    seal_results["components"].append({"component": "circuit_breaker", "status": "failed", "error": str(e)})
    print(f"❌ Circuit breaker test failed: {e}")

# Calculate overall status
failed_components = [c for c in seal_results["components"] if c["status"] == "failed"]
seal_results["overall_status"] = "failed" if failed_components else "passed"
seal_results["failed_count"] = len(failed_components)
seal_results["passed_count"] = len(seal_results["components"]) - len(failed_components)

import json
with open('seal_security_results.json', 'w') as f:
    json.dump(seal_results, f, indent=2)
EOF

      - name: 📊 Final Security Assessment
        run: |
          echo "📊 Generating final security assessment..."
          
          python3 << 'EOF'
import json

# Load all security test results
security_data = {}

try:
    with open('seal_security_results.json', 'r') as f:
        security_data["seal"] = json.load(f)
except:
    security_data["seal"] = {"overall_status": "unknown"}

# Generate final assessment
print("## 🛡️ Final Security Assessment")
print("")

seal_status = security_data["seal"].get("overall_status", "unknown")
if seal_status == "passed":
    print("✅ **SEAL Safety Framework: SECURE**")
    print(f"   - Components Tested: {security_data['seal'].get('passed_count', 0)}")
else:
    print("❌ **SEAL Safety Framework: ISSUES DETECTED**")
    print(f"   - Failed Components: {security_data['seal'].get('failed_count', 0)}")
    print(f"   - Passed Components: {security_data['seal'].get('passed_count', 0)}")

print("")
if seal_status == "passed":
    print("🎉 **OVERALL SECURITY STATUS: STRONG SECURITY POSTURE**")
else:
    print("⚠️ **OVERALL SECURITY STATUS: SECURITY IMPROVEMENTS NEEDED**")
EOF

      - name: 📤 Upload Security Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results-${{ github.sha }}
          path: |
            auth_test_results.json
            middleware_test_results.json
            seal_security_results.json