"""Initial migration: Create all PRSM tables

Revision ID: 8377a6cba565
Revises: 
Create Date: 2025-06-10 12:54:31.602363

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8377a6cba565'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('circuit_breaker_events',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('triggered_by', sa.String(length=255), nullable=False),
    sa.Column('safety_level', sa.String(length=20), nullable=False),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('affected_components', sa.JSON(), nullable=True),
    sa.Column('resolution_action', sa.Text(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index('idx_circuit_breaker_level_created', 'circuit_breaker_events', ['safety_level', 'created_at'], unique=False)
    op.create_index('idx_circuit_breaker_resolved', 'circuit_breaker_events', ['resolved_at'], unique=False)
    op.create_index(op.f('ix_circuit_breaker_events_safety_level'), 'circuit_breaker_events', ['safety_level'], unique=False)
    op.create_table('ftns_balances',
    sa.Column('user_id', sa.String(length=255), nullable=False),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.Column('locked_balance', sa.Float(), nullable=False),
    sa.Column('last_dividend', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index('idx_ftns_balance_updated', 'ftns_balances', ['updated_at'], unique=False)
    op.create_table('ftns_transactions',
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.Column('from_user', sa.String(length=255), nullable=True),
    sa.Column('to_user', sa.String(length=255), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('transaction_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('context_units', sa.Integer(), nullable=True),
    sa.Column('ipfs_cid', sa.String(length=255), nullable=True),
    sa.Column('block_hash', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('transaction_id')
    )
    op.create_index('idx_ftns_block_hash', 'ftns_transactions', ['block_hash'], unique=False)
    op.create_index('idx_ftns_created', 'ftns_transactions', ['created_at'], unique=False)
    op.create_index('idx_ftns_user_type_created', 'ftns_transactions', ['to_user', 'transaction_type', 'created_at'], unique=False)
    op.create_index(op.f('ix_ftns_transactions_from_user'), 'ftns_transactions', ['from_user'], unique=False)
    op.create_index(op.f('ix_ftns_transactions_to_user'), 'ftns_transactions', ['to_user'], unique=False)
    op.create_index(op.f('ix_ftns_transactions_transaction_type'), 'ftns_transactions', ['transaction_type'], unique=False)
    op.create_table('model_registry',
    sa.Column('model_id', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('model_type', sa.String(length=50), nullable=False),
    sa.Column('specialization', sa.String(length=255), nullable=True),
    sa.Column('owner_id', sa.String(length=255), nullable=False),
    sa.Column('ipfs_cid', sa.String(length=255), nullable=True),
    sa.Column('version', sa.String(length=50), nullable=True),
    sa.Column('performance_metrics', sa.JSON(), nullable=True),
    sa.Column('resource_requirements', sa.JSON(), nullable=True),
    sa.Column('pricing_model', sa.JSON(), nullable=True),
    sa.Column('availability_status', sa.String(length=50), nullable=True),
    sa.Column('total_usage_hours', sa.Float(), nullable=True),
    sa.Column('reputation_score', sa.Float(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('model_id'),
    sa.UniqueConstraint('name', 'version', 'owner_id', name='uq_model_name_version_owner')
    )
    op.create_index('idx_model_availability', 'model_registry', ['availability_status'], unique=False)
    op.create_index('idx_model_owner_active', 'model_registry', ['owner_id', 'active'], unique=False)
    op.create_index('idx_model_type_specialization', 'model_registry', ['model_type', 'specialization'], unique=False)
    op.create_index(op.f('ix_model_registry_active'), 'model_registry', ['active'], unique=False)
    op.create_index(op.f('ix_model_registry_availability_status'), 'model_registry', ['availability_status'], unique=False)
    op.create_index(op.f('ix_model_registry_ipfs_cid'), 'model_registry', ['ipfs_cid'], unique=False)
    op.create_index(op.f('ix_model_registry_model_type'), 'model_registry', ['model_type'], unique=False)
    op.create_index(op.f('ix_model_registry_owner_id'), 'model_registry', ['owner_id'], unique=False)
    op.create_index(op.f('ix_model_registry_specialization'), 'model_registry', ['specialization'], unique=False)
    op.create_table('peer_nodes',
    sa.Column('node_id', sa.String(length=255), nullable=False),
    sa.Column('peer_id', sa.String(length=255), nullable=False),
    sa.Column('multiaddr', sa.String(length=500), nullable=False),
    sa.Column('capabilities', sa.JSON(), nullable=True),
    sa.Column('reputation_score', sa.Float(), nullable=True),
    sa.Column('last_seen', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('node_id'),
    sa.UniqueConstraint('peer_id')
    )
    op.create_index('idx_peer_active_last_seen', 'peer_nodes', ['active', 'last_seen'], unique=False)
    op.create_index('idx_peer_reputation', 'peer_nodes', ['reputation_score'], unique=False)
    op.create_index(op.f('ix_peer_nodes_active'), 'peer_nodes', ['active'], unique=False)
    op.create_table('prsm_sessions',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(length=255), nullable=False),
    sa.Column('nwtn_context_allocation', sa.Integer(), nullable=True),
    sa.Column('context_used', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('model_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_index('idx_session_status_created', 'prsm_sessions', ['status', 'created_at'], unique=False)
    op.create_index('idx_session_user_created', 'prsm_sessions', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_prsm_sessions_status'), 'prsm_sessions', ['status'], unique=False)
    op.create_index(op.f('ix_prsm_sessions_user_id'), 'prsm_sessions', ['user_id'], unique=False)
    op.create_table('teacher_models',
    sa.Column('teacher_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('specialization', sa.String(length=255), nullable=False),
    sa.Column('model_type', sa.String(length=50), nullable=True),
    sa.Column('performance_score', sa.Float(), nullable=True),
    sa.Column('curriculum_ids', sa.JSON(), nullable=True),
    sa.Column('student_models', sa.JSON(), nullable=True),
    sa.Column('rlvr_score', sa.Float(), nullable=True),
    sa.Column('ipfs_cid', sa.String(length=255), nullable=True),
    sa.Column('version', sa.String(length=50), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('teacher_id'),
    sa.UniqueConstraint('name', 'version', name='uq_teacher_name_version')
    )
    op.create_index('idx_teacher_performance', 'teacher_models', ['performance_score'], unique=False)
    op.create_index('idx_teacher_specialization_active', 'teacher_models', ['specialization', 'active'], unique=False)
    op.create_index(op.f('ix_teacher_models_active'), 'teacher_models', ['active'], unique=False)
    op.create_index(op.f('ix_teacher_models_ipfs_cid'), 'teacher_models', ['ipfs_cid'], unique=False)
    op.create_index(op.f('ix_teacher_models_model_type'), 'teacher_models', ['model_type'], unique=False)
    op.create_index(op.f('ix_teacher_models_specialization'), 'teacher_models', ['specialization'], unique=False)
    op.create_table('teams',
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('team_type', sa.String(length=50), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('logo_url', sa.String(length=500), nullable=True),
    sa.Column('governance_model', sa.String(length=50), nullable=True),
    sa.Column('reward_policy', sa.String(length=50), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('max_members', sa.Integer(), nullable=True),
    sa.Column('entry_stake_required', sa.Float(), nullable=True),
    sa.Column('research_domains', sa.JSON(), nullable=True),
    sa.Column('keywords', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('founding_date', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('member_count', sa.Integer(), nullable=True),
    sa.Column('total_ftns_earned', sa.Float(), nullable=True),
    sa.Column('total_tasks_completed', sa.Integer(), nullable=True),
    sa.Column('impact_score', sa.Float(), nullable=True),
    sa.Column('external_links', sa.JSON(), nullable=True),
    sa.Column('contact_info', sa.JSON(), nullable=True),
    sa.Column('model_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('team_id'),
    sa.UniqueConstraint('name', name='uq_team_name')
    )
    op.create_index('idx_team_impact_score', 'teams', ['impact_score'], unique=False)
    op.create_index('idx_team_public_active', 'teams', ['is_public', 'is_active'], unique=False)
    op.create_index('idx_team_type_active', 'teams', ['team_type', 'is_active'], unique=False)
    op.create_index(op.f('ix_teams_impact_score'), 'teams', ['impact_score'], unique=False)
    op.create_index(op.f('ix_teams_is_active'), 'teams', ['is_active'], unique=False)
    op.create_index(op.f('ix_teams_is_public'), 'teams', ['is_public'], unique=False)
    op.create_index(op.f('ix_teams_team_type'), 'teams', ['team_type'], unique=False)
    op.create_table('architect_tasks',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('parent_task_id', sa.UUID(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.Column('instruction', sa.Text(), nullable=False),
    sa.Column('complexity_score', sa.Float(), nullable=True),
    sa.Column('dependencies', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('assigned_agent', sa.String(length=255), nullable=True),
    sa.Column('result', sa.JSON(), nullable=True),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.Column('model_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['parent_task_id'], ['architect_tasks.task_id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['prsm_sessions.session_id'], ),
    sa.PrimaryKeyConstraint('task_id')
    )
    op.create_index('idx_task_parent', 'architect_tasks', ['parent_task_id'], unique=False)
    op.create_index('idx_task_session_level', 'architect_tasks', ['session_id', 'level'], unique=False)
    op.create_index('idx_task_status_created', 'architect_tasks', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_architect_tasks_status'), 'architect_tasks', ['status'], unique=False)
    op.create_table('reasoning_steps',
    sa.Column('step_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('agent_type', sa.String(length=50), nullable=False),
    sa.Column('agent_id', sa.String(length=255), nullable=False),
    sa.Column('input_data', sa.JSON(), nullable=False),
    sa.Column('output_data', sa.JSON(), nullable=False),
    sa.Column('execution_time', sa.Float(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['prsm_sessions.session_id'], ),
    sa.PrimaryKeyConstraint('step_id')
    )
    op.create_index('idx_reasoning_agent_type', 'reasoning_steps', ['agent_type'], unique=False)
    op.create_index('idx_reasoning_session_timestamp', 'reasoning_steps', ['session_id', 'timestamp'], unique=False)
    op.create_table('safety_flags',
    sa.Column('flag_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('level', sa.String(length=20), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('triggered_by', sa.String(length=255), nullable=False),
    sa.Column('resolved', sa.Boolean(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['prsm_sessions.session_id'], ),
    sa.PrimaryKeyConstraint('flag_id')
    )
    op.create_index('idx_safety_level_timestamp', 'safety_flags', ['level', 'timestamp'], unique=False)
    op.create_index('idx_safety_resolved', 'safety_flags', ['resolved'], unique=False)
    op.create_index(op.f('ix_safety_flags_level'), 'safety_flags', ['level'], unique=False)
    op.create_index(op.f('ix_safety_flags_resolved'), 'safety_flags', ['resolved'], unique=False)
    op.create_table('team_governance',
    sa.Column('governance_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('model', sa.String(length=50), nullable=True),
    sa.Column('constitution', sa.JSON(), nullable=True),
    sa.Column('voting_period_days', sa.Integer(), nullable=True),
    sa.Column('quorum_percentage', sa.Float(), nullable=True),
    sa.Column('approval_threshold', sa.Float(), nullable=True),
    sa.Column('role_assignments', sa.JSON(), nullable=True),
    sa.Column('role_term_limits', sa.JSON(), nullable=True),
    sa.Column('proposal_types', sa.JSON(), nullable=True),
    sa.Column('type_thresholds', sa.JSON(), nullable=True),
    sa.Column('emergency_roles', sa.JSON(), nullable=True),
    sa.Column('emergency_procedures', sa.JSON(), nullable=True),
    sa.Column('max_owner_power', sa.Float(), nullable=True),
    sa.Column('member_protection_threshold', sa.Float(), nullable=True),
    sa.Column('active_proposals', sa.JSON(), nullable=True),
    sa.Column('total_proposals', sa.Integer(), nullable=True),
    sa.Column('proposals_passed', sa.Integer(), nullable=True),
    sa.Column('average_participation', sa.Float(), nullable=True),
    sa.Column('last_vote', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('governance_id'),
    sa.UniqueConstraint('team_id')
    )
    op.create_index('idx_team_governance_model', 'team_governance', ['model'], unique=False)
    op.create_table('team_members',
    sa.Column('membership_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('invited_by', sa.String(length=255), nullable=True),
    sa.Column('invitation_message', sa.Text(), nullable=True),
    sa.Column('invited_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('joined_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('left_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ftns_contributed', sa.Float(), nullable=True),
    sa.Column('tasks_completed', sa.Integer(), nullable=True),
    sa.Column('models_contributed', sa.Integer(), nullable=True),
    sa.Column('datasets_uploaded', sa.Integer(), nullable=True),
    sa.Column('performance_score', sa.Float(), nullable=True),
    sa.Column('reputation_score', sa.Float(), nullable=True),
    sa.Column('collaboration_score', sa.Float(), nullable=True),
    sa.Column('can_invite_members', sa.Boolean(), nullable=True),
    sa.Column('can_manage_tasks', sa.Boolean(), nullable=True),
    sa.Column('can_access_treasury', sa.Boolean(), nullable=True),
    sa.Column('can_vote', sa.Boolean(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('expertise_areas', sa.JSON(), nullable=True),
    sa.Column('public_profile', sa.Boolean(), nullable=True),
    sa.Column('model_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('membership_id'),
    sa.UniqueConstraint('team_id', 'user_id', name='uq_team_member')
    )
    op.create_index('idx_team_member_role', 'team_members', ['role'], unique=False)
    op.create_index('idx_team_member_status', 'team_members', ['status'], unique=False)
    op.create_index('idx_team_member_team_user', 'team_members', ['team_id', 'user_id'], unique=False)
    op.create_index(op.f('ix_team_members_role'), 'team_members', ['role'], unique=False)
    op.create_index(op.f('ix_team_members_status'), 'team_members', ['status'], unique=False)
    op.create_index(op.f('ix_team_members_user_id'), 'team_members', ['user_id'], unique=False)
    op.create_table('team_tasks',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('task_type', sa.String(length=50), nullable=True),
    sa.Column('assigned_to', sa.JSON(), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=False),
    sa.Column('priority', sa.String(length=20), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('progress_percentage', sa.Float(), nullable=True),
    sa.Column('ftns_budget', sa.Float(), nullable=True),
    sa.Column('ftns_spent', sa.Float(), nullable=True),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_hours', sa.Float(), nullable=True),
    sa.Column('actual_hours', sa.Float(), nullable=True),
    sa.Column('output_artifacts', sa.JSON(), nullable=True),
    sa.Column('output_models', sa.JSON(), nullable=True),
    sa.Column('performance_metrics', sa.JSON(), nullable=True),
    sa.Column('requires_consensus', sa.Boolean(), nullable=True),
    sa.Column('consensus_threshold', sa.Float(), nullable=True),
    sa.Column('votes_for', sa.Integer(), nullable=True),
    sa.Column('votes_against', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('external_links', sa.JSON(), nullable=True),
    sa.Column('model_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('task_id')
    )
    op.create_index('idx_team_task_created_by', 'team_tasks', ['created_by'], unique=False)
    op.create_index('idx_team_task_due_date', 'team_tasks', ['due_date'], unique=False)
    op.create_index('idx_team_task_team_status', 'team_tasks', ['team_id', 'status'], unique=False)
    op.create_index('idx_team_task_type_priority', 'team_tasks', ['task_type', 'priority'], unique=False)
    op.create_index(op.f('ix_team_tasks_priority'), 'team_tasks', ['priority'], unique=False)
    op.create_index(op.f('ix_team_tasks_status'), 'team_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_team_tasks_task_type'), 'team_tasks', ['task_type'], unique=False)
    op.create_table('team_wallets',
    sa.Column('wallet_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('is_multisig', sa.Boolean(), nullable=True),
    sa.Column('required_signatures', sa.Integer(), nullable=True),
    sa.Column('authorized_signers', sa.JSON(), nullable=True),
    sa.Column('total_balance', sa.Float(), nullable=True),
    sa.Column('available_balance', sa.Float(), nullable=True),
    sa.Column('locked_balance', sa.Float(), nullable=True),
    sa.Column('reward_policy', sa.String(length=50), nullable=True),
    sa.Column('policy_config', sa.JSON(), nullable=True),
    sa.Column('distribution_metrics', sa.JSON(), nullable=True),
    sa.Column('metric_weights', sa.JSON(), nullable=True),
    sa.Column('auto_distribution_enabled', sa.Boolean(), nullable=True),
    sa.Column('distribution_frequency_days', sa.Integer(), nullable=True),
    sa.Column('last_distribution', sa.DateTime(timezone=True), nullable=True),
    sa.Column('wallet_address', sa.String(length=255), nullable=True),
    sa.Column('spending_limits', sa.JSON(), nullable=True),
    sa.Column('emergency_freeze', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('wallet_id'),
    sa.UniqueConstraint('team_id')
    )
    op.create_index('idx_team_wallet_balance', 'team_wallets', ['total_balance'], unique=False)
    op.create_index('idx_team_wallet_emergency', 'team_wallets', ['emergency_freeze'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_team_wallet_emergency', table_name='team_wallets')
    op.drop_index('idx_team_wallet_balance', table_name='team_wallets')
    op.drop_table('team_wallets')
    op.drop_index(op.f('ix_team_tasks_task_type'), table_name='team_tasks')
    op.drop_index(op.f('ix_team_tasks_status'), table_name='team_tasks')
    op.drop_index(op.f('ix_team_tasks_priority'), table_name='team_tasks')
    op.drop_index('idx_team_task_type_priority', table_name='team_tasks')
    op.drop_index('idx_team_task_team_status', table_name='team_tasks')
    op.drop_index('idx_team_task_due_date', table_name='team_tasks')
    op.drop_index('idx_team_task_created_by', table_name='team_tasks')
    op.drop_table('team_tasks')
    op.drop_index(op.f('ix_team_members_user_id'), table_name='team_members')
    op.drop_index(op.f('ix_team_members_status'), table_name='team_members')
    op.drop_index(op.f('ix_team_members_role'), table_name='team_members')
    op.drop_index('idx_team_member_team_user', table_name='team_members')
    op.drop_index('idx_team_member_status', table_name='team_members')
    op.drop_index('idx_team_member_role', table_name='team_members')
    op.drop_table('team_members')
    op.drop_index('idx_team_governance_model', table_name='team_governance')
    op.drop_table('team_governance')
    op.drop_index(op.f('ix_safety_flags_resolved'), table_name='safety_flags')
    op.drop_index(op.f('ix_safety_flags_level'), table_name='safety_flags')
    op.drop_index('idx_safety_resolved', table_name='safety_flags')
    op.drop_index('idx_safety_level_timestamp', table_name='safety_flags')
    op.drop_table('safety_flags')
    op.drop_index('idx_reasoning_session_timestamp', table_name='reasoning_steps')
    op.drop_index('idx_reasoning_agent_type', table_name='reasoning_steps')
    op.drop_table('reasoning_steps')
    op.drop_index(op.f('ix_architect_tasks_status'), table_name='architect_tasks')
    op.drop_index('idx_task_status_created', table_name='architect_tasks')
    op.drop_index('idx_task_session_level', table_name='architect_tasks')
    op.drop_index('idx_task_parent', table_name='architect_tasks')
    op.drop_table('architect_tasks')
    op.drop_index(op.f('ix_teams_team_type'), table_name='teams')
    op.drop_index(op.f('ix_teams_is_public'), table_name='teams')
    op.drop_index(op.f('ix_teams_is_active'), table_name='teams')
    op.drop_index(op.f('ix_teams_impact_score'), table_name='teams')
    op.drop_index('idx_team_type_active', table_name='teams')
    op.drop_index('idx_team_public_active', table_name='teams')
    op.drop_index('idx_team_impact_score', table_name='teams')
    op.drop_table('teams')
    op.drop_index(op.f('ix_teacher_models_specialization'), table_name='teacher_models')
    op.drop_index(op.f('ix_teacher_models_model_type'), table_name='teacher_models')
    op.drop_index(op.f('ix_teacher_models_ipfs_cid'), table_name='teacher_models')
    op.drop_index(op.f('ix_teacher_models_active'), table_name='teacher_models')
    op.drop_index('idx_teacher_specialization_active', table_name='teacher_models')
    op.drop_index('idx_teacher_performance', table_name='teacher_models')
    op.drop_table('teacher_models')
    op.drop_index(op.f('ix_prsm_sessions_user_id'), table_name='prsm_sessions')
    op.drop_index(op.f('ix_prsm_sessions_status'), table_name='prsm_sessions')
    op.drop_index('idx_session_user_created', table_name='prsm_sessions')
    op.drop_index('idx_session_status_created', table_name='prsm_sessions')
    op.drop_table('prsm_sessions')
    op.drop_index(op.f('ix_peer_nodes_active'), table_name='peer_nodes')
    op.drop_index('idx_peer_reputation', table_name='peer_nodes')
    op.drop_index('idx_peer_active_last_seen', table_name='peer_nodes')
    op.drop_table('peer_nodes')
    op.drop_index(op.f('ix_model_registry_specialization'), table_name='model_registry')
    op.drop_index(op.f('ix_model_registry_owner_id'), table_name='model_registry')
    op.drop_index(op.f('ix_model_registry_model_type'), table_name='model_registry')
    op.drop_index(op.f('ix_model_registry_ipfs_cid'), table_name='model_registry')
    op.drop_index(op.f('ix_model_registry_availability_status'), table_name='model_registry')
    op.drop_index(op.f('ix_model_registry_active'), table_name='model_registry')
    op.drop_index('idx_model_type_specialization', table_name='model_registry')
    op.drop_index('idx_model_owner_active', table_name='model_registry')
    op.drop_index('idx_model_availability', table_name='model_registry')
    op.drop_table('model_registry')
    op.drop_index(op.f('ix_ftns_transactions_transaction_type'), table_name='ftns_transactions')
    op.drop_index(op.f('ix_ftns_transactions_to_user'), table_name='ftns_transactions')
    op.drop_index(op.f('ix_ftns_transactions_from_user'), table_name='ftns_transactions')
    op.drop_index('idx_ftns_user_type_created', table_name='ftns_transactions')
    op.drop_index('idx_ftns_created', table_name='ftns_transactions')
    op.drop_index('idx_ftns_block_hash', table_name='ftns_transactions')
    op.drop_table('ftns_transactions')
    op.drop_index('idx_ftns_balance_updated', table_name='ftns_balances')
    op.drop_table('ftns_balances')
    op.drop_index(op.f('ix_circuit_breaker_events_safety_level'), table_name='circuit_breaker_events')
    op.drop_index('idx_circuit_breaker_resolved', table_name='circuit_breaker_events')
    op.drop_index('idx_circuit_breaker_level_created', table_name='circuit_breaker_events')
    op.drop_table('circuit_breaker_events')
    # ### end Alembic commands ###
