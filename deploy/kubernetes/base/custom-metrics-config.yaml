# Custom Metrics API configuration for PRSM autoscaling
# Enables autoscaling based on PRSM-specific metrics

apiVersion: v1
kind: ConfigMap
metadata:
  name: adapter-config
  namespace: custom-metrics
data:
  config.yaml: |
    rules:
    # PRSM API specific metrics
    - seriesQuery: 'prsm_http_requests_per_second{namespace!="",pod!=""}'
      seriesFilters: []
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^prsm_(.*)
        as: "prsm_${1}"
      metricsQuery: 'avg_over_time(<<.Series>>{<<.LabelMatchers>>}[2m])'
    
    # FTNS Token processing rate
    - seriesQuery: 'prsm_ftns_transactions_per_second{namespace!="",pod!=""}'
      seriesFilters: []
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^prsm_ftns_(.*)
        as: "ftns_${1}"
      metricsQuery: 'avg_over_time(<<.Series>>{<<.LabelMatchers>>}[1m])'
    
    # Active user sessions
    - seriesQuery: 'prsm_active_sessions{namespace!="",service!=""}'
      seriesFilters: []
      resources:
        overrides:
          namespace:
            resource: namespace
          service:
            resource: service
      name:
        matches: ^prsm_(.*)
        as: "prsm_${1}"
      metricsQuery: 'max_over_time(<<.Series>>{<<.LabelMatchers>>}[30s])'
    
    # Queue depth for background tasks
    - seriesQuery: 'prsm_task_queue_depth{namespace!="",pod!=""}'
      seriesFilters: []
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^prsm_(.*)
        as: "prsm_${1}"
      metricsQuery: 'avg_over_time(<<.Series>>{<<.LabelMatchers>>}[1m])'
    
    # Model execution latency
    - seriesQuery: 'prsm_model_execution_latency_seconds{namespace!="",pod!=""}'
      seriesFilters: []
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^prsm_(.*)
        as: "prsm_${1}"
      metricsQuery: 'avg_over_time(<<.Series>>{<<.LabelMatchers>>}[2m])'
    
    # P2P network connection count
    - seriesQuery: 'prsm_p2p_active_connections{namespace!="",pod!=""}'
      seriesFilters: []
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^prsm_(.*)
        as: "prsm_${1}"
      metricsQuery: 'max_over_time(<<.Series>>{<<.LabelMatchers>>}[30s])'
    
    # External metrics for cloud provider integration
    externalRules:
    - seriesQuery: 'aws_sqs_approximate_number_of_visible_messages'
      seriesFilters:
      - isNot: '^$'
      resources:
        template: <<.Resource>>
      name:
        matches: ^aws_sqs_(.*)
        as: "sqs_${1}"
      metricsQuery: 'max_over_time(<<.Series>>{<<.LabelMatchers>>}[1m])'
    
    - seriesQuery: 'gcp_pubsub_subscription_num_undelivered_messages'
      seriesFilters:
      - isNot: '^$'
      resources:
        template: <<.Resource>>
      name:
        matches: ^gcp_pubsub_(.*)
        as: "pubsub_${1}"
      metricsQuery: 'max_over_time(<<.Series>>{<<.LabelMatchers>>}[1m])'
    
    resourceRules:
      cpu:
        containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}[3m])) by (<<.GroupBy>>)
        nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>,id='/'}[3m])) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      memory:
        containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,container!="POD",container!="",pod!=""}) by (<<.GroupBy>>)
        nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      window: 3m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-metrics-apiserver
  namespace: custom-metrics
  labels:
    app: custom-metrics-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: custom-metrics-apiserver
  template:
    metadata:
      labels:
        app: custom-metrics-apiserver
      name: custom-metrics-apiserver
    spec:
      serviceAccountName: custom-metrics-apiserver
      containers:
      - name: custom-metrics-apiserver
        image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.1
        args:
        - --secure-port=6443
        - --tls-cert-file=/var/run/serving-cert/tls.crt
        - --tls-private-key-file=/var/run/serving-cert/tls.key
        - --logtostderr=true
        - --prometheus-url=http://prometheus.monitoring.svc:9090/
        - --metrics-relist-interval=1m
        - --v=4
        - --config=/etc/adapter/config.yaml
        ports:
        - containerPort: 6443
        volumeMounts:
        - mountPath: /var/run/serving-cert
          name: volume-serving-cert
          readOnly: true
        - mountPath: /etc/adapter/
          name: config
          readOnly: true
        - mountPath: /tmp
          name: tmp-vol
      volumes:
      - name: volume-serving-cert
        secret:
          secretName: cm-adapter-serving-certs
      - name: config
        configMap:
          name: adapter-config
      - name: tmp-vol
        emptyDir: {}