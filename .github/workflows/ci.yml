# PRSM Continuous Integration Pipeline
# Automated testing, security scanning, and quality checks

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===================================
  # Code Quality and Linting
  # ===================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run isort import sorting check
        run: isort --check-only --diff .

      - name: Run flake8 linting
        run: flake8 .

      - name: Run mypy type checking
        run: mypy prsm/

      - name: Check for security vulnerabilities  
        run: |
          pip install bandit safety pip-audit
          bandit -r prsm/ -f json -o bandit-report.json --exit-zero
          safety check --json --output safety-report.json --continue-on-error
          pip-audit --format=json --output=pip-audit-report.json --continue-on-error

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  # ===================================
  # Unit and Integration Tests
  # ===================================
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: prsm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/prsm_test
          REDIS_URL: redis://localhost:6379/0
          PRSM_ENV: testing
          FTNS_ENABLED: false
        run: |
          # Run database migrations
          alembic upgrade head

      - name: Run pytest
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/prsm_test
          REDIS_URL: redis://localhost:6379/0
          PRSM_ENV: testing
          FTNS_ENABLED: false
        run: |
          pytest -v --cov=prsm --cov-report=xml --cov-report=html tests/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  # ===================================
  # Docker Build and Security Scan
  # ===================================
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: prsm:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'prsm:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ===================================
  # End-to-End Integration Tests
  # ===================================
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env << EOF
          POSTGRES_PASSWORD=test_password
          PRSM_ENV=testing
          FTNS_ENABLED=false
          OPENAI_API_KEY=dummy_key
          ANTHROPIC_API_KEY=dummy_key
          HUGGINGFACE_API_KEY=dummy_key
          EOF

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d --build
          sleep 60  # Wait for services to start

      - name: Wait for services to be healthy
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8000/health; do echo "Waiting for API..."; sleep 5; done'

      - name: Run integration tests
        run: |
          # Test API endpoints
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/api/v1/health
          
          # Test database connectivity
          docker-compose exec -T prsm-api python -c "
          import asyncio
          from prsm.core.database_service import get_database_service
          async def test():
              db = get_database_service()
              health = await db.get_health_status()
              assert health['status'] == 'healthy'
              print('Database connectivity test passed')
          asyncio.run(test())
          "

      - name: Collect service logs
        if: always()
        run: |
          mkdir -p logs
          docker-compose logs --no-color > logs/docker-compose.log

      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-logs
          path: logs/

      - name: Clean up
        if: always()
        run: |
          docker-compose down -v

  # ===================================
  # Performance Tests
  # ===================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install performance testing tools
        run: |
          pip install locust pytest-benchmark

      - name: Start PRSM services
        run: |
          echo "POSTGRES_PASSWORD=test_password" > .env
          echo "PRSM_ENV=testing" >> .env
          echo "FTNS_ENABLED=false" >> .env
          docker-compose up -d --build
          sleep 60

      - name: Run load tests
        run: |
          # Simple load test with curl
          for i in {1..10}; do
            curl -f http://localhost:8000/health
          done
          
          echo "Basic load test completed"

      - name: Clean up
        if: always()
        run: docker-compose down -v

  # ===================================
  # Dependency Security Check
  # ===================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run dependency security audit
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: requirements.txt requirements-dev.txt

      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ===================================
  # Notification
  # ===================================
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, docker, security]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify on success
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success' }}
        run: echo "✅ All CI checks passed!"

      - name: Notify on failure
        if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.docker.result == 'failure' }}
        run: |
          echo "❌ CI pipeline failed!"
          exit 1