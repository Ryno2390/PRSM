name: PRSM Deployment Pipeline

on:
  push:
    tags:
      - 'deploy-ready-*'
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip quality gates)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'prsm/prsm-api'

jobs:
  # Pre-deployment validation
  pre-deployment-checks:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      deployment-approved: ${{ steps.validate.outputs.approved }}
      target-environment: ${{ steps.determine-env.outputs.environment }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine Target Environment
      id: determine-env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
    
    - name: Download Latest Performance Results
      uses: actions/download-artifact@v3
      with:
        name: performance-results
        path: performance-results/
      continue-on-error: true
    
    - name: Validate Deployment Readiness
      id: validate
      run: |
        approved=true
        
        # Skip validation if force deploy is enabled
        if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          echo "⚠️ Force deployment enabled - skipping quality gates"
          echo "approved=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check for performance results
        if [[ -d "performance-results" ]]; then
          python -c "
          import json
          import os
          import sys
          
          issues = []
          
          # Check all performance result files
          for file in os.listdir('performance-results/'):
              if file.endswith('.json'):
                  try:
                      with open(f'performance-results/{file}', 'r') as f:
                          data = json.load(f)
                          
                      if 'summary' in data:
                          summary = data['summary']
                          grade = summary.get('performance_grade', 'F')
                          
                          if grade in ['F', 'D']:
                              issues.append(f'Poor performance grade: {grade}')
                          
                          critical_issues = summary.get('critical_issues', [])
                          if critical_issues:
                              issues.extend(critical_issues)
                  except Exception as e:
                      print(f'Warning: Could not parse {file}: {e}')
          
          if issues:
              print('❌ Deployment validation failed:')
              for issue in issues:
                  print(f'  - {issue}')
              sys.exit(1)
          else:
              print('✅ All deployment quality gates passed')
          "
        else
          echo "⚠️ No performance results found - allowing deployment"
        fi
        
        echo "approved=true" >> $GITHUB_OUTPUT
    
    - name: Check Environment Secrets
      run: |
        env_name="${{ steps.determine-env.outputs.environment }}"
        echo "🔐 Validating secrets for environment: $env_name"
        
        # This would check that required secrets are available
        # In a real deployment, you'd validate database URLs, API keys, etc.
        echo "✅ Environment secrets validation passed"

  # Build and push Docker image
  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deployment-approved == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 90

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [pre-deployment-checks, build-and-push]
    if: needs.pre-deployment-checks.outputs.target-environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging Environment
      run: |
        echo "🚀 Deploying to Staging Environment"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        
        # In a real deployment, this would:
        # 1. Update Kubernetes manifests
        # 2. Apply configuration changes
        # 3. Perform rolling deployment
        # 4. Run health checks
        
        echo "✅ Staging deployment completed successfully"
    
    - name: Run Staging Health Checks
      run: |
        echo "🏥 Running staging health checks..."
        
        # Simulate health checks
        sleep 5
        
        # In real deployment, this would check:
        # - API endpoints are responding
        # - Database connectivity
        # - External service integrations
        # - Performance metrics are within acceptable ranges
        
        echo "✅ All staging health checks passed"
    
    - name: Run Staging Smoke Tests
      run: |
        echo "💨 Running staging smoke tests..."
        
        # In real deployment, this would run a subset of critical tests
        # against the staging environment to ensure basic functionality
        
        echo "✅ Staging smoke tests passed"

  # Deploy to Production (requires manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pre-deployment-checks, build-and-push]
    if: needs.pre-deployment-checks.outputs.target-environment == 'production'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Pre-Production Final Validation
      run: |
        echo "🔍 Final pre-production validation..."
        
        # Final safety checks before production deployment
        echo "✅ Pre-production validation completed"
    
    - name: Deploy to Production Environment
      run: |
        echo "🚀 Deploying to Production Environment"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        
        # Production deployment steps:
        # 1. Blue-green or canary deployment
        # 2. Database migrations (if needed)
        # 3. Configuration updates
        # 4. Traffic routing updates
        # 5. Monitoring and alerting setup
        
        echo "⏳ Production deployment in progress..."
        sleep 10
        echo "✅ Production deployment completed successfully"
    
    - name: Run Production Health Checks
      run: |
        echo "🏥 Running production health checks..."
        
        # Critical production health checks
        sleep 10
        
        echo "✅ All production health checks passed"
        echo "🎉 Production deployment successful!"
    
    - name: Update Production Monitoring
      run: |
        echo "📊 Updating production monitoring and alerting..."
        
        # Update monitoring dashboards
        # Configure alerts for new deployment
        # Set up performance baselines
        
        echo "✅ Production monitoring updated"

  # Post-deployment verification
  post-deployment:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [pre-deployment-checks, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Determine Deployed Environment
      id: env-check
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
    
    - name: Run Post-Deployment Tests
      run: |
        env_name="${{ steps.env-check.outputs.environment }}"
        echo "🧪 Running post-deployment tests for $env_name..."
        
        # Post-deployment verification tests
        # - End-to-end functional tests
        # - Performance baseline verification
        # - Security scan of deployed environment
        # - Integration tests with external services
        
        echo "✅ Post-deployment tests completed successfully"
    
    - name: Update Performance Baselines
      if: steps.env-check.outputs.environment == 'production'
      run: |
        echo "📈 Updating performance baselines for production..."
        
        # Update production performance baselines
        # This helps track performance regressions over time
        
        echo "✅ Performance baselines updated"
    
    - name: Create Deployment Record
      run: |
        env_name="${{ steps.env-check.outputs.environment }}"
        timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        cat > deployment-record.json << EOF
        {
          "deployment_id": "${{ github.run_id }}",
          "environment": "$env_name",
          "timestamp": "$timestamp",
          "git_sha": "${{ github.sha }}",
          "git_ref": "${{ github.ref }}",
          "image_tag": "${{ needs.build-and-push.outputs.image-tag }}",
          "image_digest": "${{ needs.build-and-push.outputs.image-digest }}",
          "deployed_by": "${{ github.actor }}",
          "deployment_type": "${{ github.event_name }}",
          "status": "successful"
        }
        EOF
        
        echo "📝 Deployment record created"
        cat deployment-record.json
    
    - name: Upload Deployment Record
      uses: actions/upload-artifact@v3
      with:
        name: deployment-record-${{ steps.env-check.outputs.environment }}
        path: deployment-record.json
        retention-days: 365

  # Rollback capability
  rollback-on-failure:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-staging, deploy-production, post-deployment]
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' || needs.post-deployment.result == 'failure')
    
    steps:
    - name: Determine Failed Environment
      id: failed-env
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
    
    - name: Initiate Rollback
      run: |
        env_name="${{ steps.failed-env.outputs.environment }}"
        echo "🔄 Initiating rollback for $env_name environment..."
        
        # Rollback procedures:
        # 1. Revert to previous known-good deployment
        # 2. Restore database if needed
        # 3. Update load balancer configuration
        # 4. Verify rollback success
        
        echo "⏳ Rollback in progress..."
        sleep 5
        echo "✅ Rollback completed successfully"
    
    - name: Verify Rollback Success
      run: |
        env_name="${{ steps.failed-env.outputs.environment }}"
        echo "🔍 Verifying rollback success for $env_name..."
        
        # Verify that the environment is back to a healthy state
        # Run critical health checks
        
        echo "✅ Rollback verification successful"
    
    - name: Create Rollback Report
      run: |
        env_name="${{ steps.failed-env.outputs.environment }}"
        timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        cat > rollback-report.json << EOF
        {
          "rollback_id": "${{ github.run_id }}",
          "environment": "$env_name",
          "timestamp": "$timestamp",
          "reason": "Deployment failure",
          "git_sha": "${{ github.sha }}",
          "rolled_back_by": "automatic",
          "status": "successful"
        }
        EOF
        
        echo "📝 Rollback report created"
    
    - name: Upload Rollback Report
      uses: actions/upload-artifact@v3
      with:
        name: rollback-report
        path: rollback-report.json
        retention-days: 365

  # Notification and cleanup
  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [pre-deployment-checks, deploy-staging, deploy-production, post-deployment, rollback-on-failure]
    
    steps:
    - name: Determine Deployment Status
      id: status
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "status=production-success" >> $GITHUB_OUTPUT
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "status=staging-success" >> $GITHUB_OUTPUT
          echo "environment=staging" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.rollback-on-failure.result }}" == "success" ]]; then
          echo "status=rollback-success" >> $GITHUB_OUTPUT
          echo "environment=rolled-back" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "environment=unknown" >> $GITHUB_OUTPUT
        fi
    
    - name: Send Success Notification
      if: contains(steps.status.outputs.status, 'success')
      run: |
        status="${{ steps.status.outputs.status }}"
        env_name="${{ steps.status.outputs.environment }}"
        
        echo "🎉 PRSM Deployment Notification"
        echo "=============================="
        echo "Status: SUCCESS"
        echo "Environment: $env_name"
        echo "Git SHA: ${{ github.sha }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Deployment ID: ${{ github.run_id }}"
        
        # In a real setup, this would send notifications to:
        # - Slack channels
        # - Email lists
        # - PagerDuty (for production)
        # - Deployment tracking systems
    
    - name: Send Failure Notification
      if: steps.status.outputs.status == 'failed'
      run: |
        echo "❌ PRSM Deployment Failed"
        echo "======================="
        echo "Status: FAILED"
        echo "Git SHA: ${{ github.sha }}"
        echo "Attempted by: ${{ github.actor }}"
        echo "Deployment ID: ${{ github.run_id }}"
        
        # In a real setup, this would send urgent notifications
    
    - name: Update Deployment Dashboard
      run: |
        echo "📊 Updating deployment dashboard..."
        
        # Update internal deployment tracking dashboard
        # Record deployment metrics and status
        
        echo "✅ Dashboard updated"